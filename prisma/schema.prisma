// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  MEMBER
}

// User model

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?    @default("https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/User-avatar.svg/2048px-User-avatar.svg.png")
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  products      Product[]
  reviews       Review[]
  wishlist      Wishlist[]
  cart          Cart[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// product model

model Product {
  id                String     @id @default(cuid())
  category          String
  title             String
  images            String[]
  summary           String
  description       String
  price_by_meter    Float
  quantity_by_meter Float
  creted_by         String
  owner             User       @relation(fields: [creted_by], references: [id])
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  cartItems         CartItem[]

  Review   Review[]
  wishlist Wishlist[]
}

// Cart model
model Cart {
  id         String     @id @default(cuid())
  created_by String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  user       User       @relation(fields: [created_by], references: [id])
  CartItem   CartItem[]
}

model CartItem {
  cartId    String
  productId String
  price     Float
  quantity  Float
  createdAt DateTime
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
}

// review model
model Review {
  userId     String
  productId  String
  comment    String
  rating     Int
  created_at DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId], name: "Review_userId_ProductId_key")
}

// wishlist model
model Wishlist {
  userId    String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, productId], name: "Wishlist_userId_productId_key")
}

model VerificationOtp {
  id String @id @default(cuid())
  email String
  otp String @unique
  expires DateTime

  @@unique([email, otp])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

// Todo add the order model
